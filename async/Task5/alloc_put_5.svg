<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="341"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="341"> </text>
<g id="frames">
<g>
<title>all (3,742 samples, 100.00%)</title><rect x="10.0" y="307.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="318.0">all</text>
</g>
<g>
<title>[no_Java_frame] (1 samples, 0.03%)</title><rect x="10.0" y="291.0" width="0.3" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>java.lang.String (1 samples, 0.03%)</title><rect x="10.0" y="275.0" width="0.3" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>java/lang/Thread.run (2,186 samples, 58.42%)</title><rect x="10.3" y="291.0" width="689.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.3" y="302.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2,186 samples, 58.42%)</title><rect x="10.3" y="275.0" width="689.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.3" y="286.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2,186 samples, 58.42%)</title><rect x="10.3" y="259.0" width="689.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.3" y="270.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (2,134 samples, 57.03%)</title><rect x="10.3" y="243.0" width="672.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.3" y="254.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>ru/mail/polis/service/ivanovandrey/AsyncServiceImpl$$Lambda$65/94013272.call (565 samples, 15.10%)</title><rect x="10.3" y="227.0" width="178.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.3" y="238.0">ru/mail/polis/service/i..</text>
</g>
<g>
<title>ru/mail/polis/service/ivanovandrey/AsyncServiceImpl.lambda$processRequest$1 (565 samples, 15.10%)</title><rect x="10.3" y="211.0" width="178.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.3" y="222.0">ru/mail/polis/service/i..</text>
</g>
<g>
<title>ru/mail/polis/service/ivanovandrey/AsyncServiceImpl.put (565 samples, 15.10%)</title><rect x="10.3" y="195.0" width="178.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.3" y="206.0">ru/mail/polis/service/i..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (125 samples, 3.34%)</title><rect x="10.3" y="179.0" width="39.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.3" y="190.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (125 samples, 3.34%)</title><rect x="10.3" y="163.0" width="39.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.3" y="174.0">jav..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (125 samples, 3.34%)</title><rect x="10.3" y="147.0" width="39.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="13.3" y="158.0">jav..</text>
</g>
<g>
<title>one.nio.http.Response (43 samples, 1.15%)</title><rect x="49.7" y="179.0" width="13.6" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="52.7" y="190.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (137 samples, 3.66%)</title><rect x="63.3" y="179.0" width="43.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="66.3" y="190.0">one/..</text>
</g>
<g>
<title>byte[] (51 samples, 1.36%)</title><rect x="63.3" y="163.0" width="16.1" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="66.3" y="174.0"></text>
</g>
<g>
<title>java.lang.String[] (44 samples, 1.18%)</title><rect x="79.4" y="163.0" width="13.8" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="82.4" y="174.0"></text>
</g>
<g>
<title>java.lang.String (42 samples, 1.12%)</title><rect x="93.2" y="163.0" width="13.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="96.2" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/RocksDBImpl.upsert (260 samples, 6.95%)</title><rect x="106.5" y="179.0" width="82.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="109.5" y="190.0">ru/mail/p..</text>
</g>
<g>
<title>ru/mail/polis/dao/Converter.fromByteBufferToByteArray (133 samples, 3.55%)</title><rect x="106.5" y="163.0" width="41.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="109.5" y="174.0">ru/..</text>
</g>
<g>
<title>byte[] (38 samples, 1.02%)</title><rect x="106.5" y="147.0" width="12.0" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="109.5" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (95 samples, 2.54%)</title><rect x="118.5" y="147.0" width="29.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="121.5" y="158.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (95 samples, 2.54%)</title><rect x="118.5" y="131.0" width="29.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="121.5" y="142.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/dao/Converter.toArrayShifted (127 samples, 3.39%)</title><rect x="148.4" y="163.0" width="40.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="151.4" y="174.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/Converter.fromByteBufferToByteArray (127 samples, 3.39%)</title><rect x="148.4" y="147.0" width="40.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="151.4" y="158.0">ru/..</text>
</g>
<g>
<title>byte[] (46 samples, 1.23%)</title><rect x="148.4" y="131.0" width="14.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="151.4" y="142.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (81 samples, 2.16%)</title><rect x="162.9" y="131.0" width="25.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="165.9" y="142.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (81 samples, 2.16%)</title><rect x="162.9" y="115.0" width="25.6" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="165.9" y="126.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/ivanovandrey/AsyncServiceImpl$$Lambda$66/30703227.call (1,569 samples, 41.93%)</title><rect x="188.5" y="227.0" width="494.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="191.5" y="238.0">ru/mail/polis/service/ivanovandrey/AsyncServiceImpl$$Lambda$66/30703..</text>
</g>
<g>
<title>ru/mail/polis/service/ivanovandrey/AsyncServiceImpl.lambda$forwardRequestFuture$0 (1,569 samples, 41.93%)</title><rect x="188.5" y="211.0" width="494.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="191.5" y="222.0">ru/mail/polis/service/ivanovandrey/AsyncServiceImpl.lambda$forwardRe..</text>
</g>
<g>
<title>ru/mail/polis/service/ivanovandrey/AsyncServiceImpl.forwardRequest (1,569 samples, 41.93%)</title><rect x="188.5" y="195.0" width="494.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="191.5" y="206.0">ru/mail/polis/service/ivanovandrey/AsyncServiceImpl.forwardRequest</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,548 samples, 41.37%)</title><rect x="188.5" y="179.0" width="488.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="191.5" y="190.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,548 samples, 41.37%)</title><rect x="188.5" y="163.0" width="488.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="191.5" y="174.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (6 samples, 0.16%)</title><rect x="188.5" y="147.0" width="1.9" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="191.5" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (1,362 samples, 36.40%)</title><rect x="190.4" y="147.0" width="429.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="193.4" y="158.0">one/nio/http/HttpClient$ResponseReader.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (771 samples, 20.60%)</title><rect x="190.4" y="131.0" width="243.1" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="193.4" y="142.0">byte[]</text>
</g>
<g>
<title>byte[] (591 samples, 15.79%)</title><rect x="433.5" y="131.0" width="186.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="436.5" y="142.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (164 samples, 4.38%)</title><rect x="619.9" y="147.0" width="51.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="622.9" y="158.0">one/n..</text>
</g>
<g>
<title>byte[] (3 samples, 0.08%)</title><rect x="619.9" y="131.0" width="0.9" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="622.9" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.19%)</title><rect x="620.8" y="131.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="623.8" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7 samples, 0.19%)</title><rect x="620.8" y="115.0" width="2.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="623.8" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (7 samples, 0.19%)</title><rect x="620.8" y="99.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="623.8" y="110.0"></text>
</g>
<g>
<title>byte[] (7 samples, 0.19%)</title><rect x="620.8" y="83.0" width="2.2" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="623.8" y="94.0"></text>
</g>
<g>
<title>one.nio.http.Response (2 samples, 0.05%)</title><rect x="623.0" y="131.0" width="0.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="626.0" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (144 samples, 3.85%)</title><rect x="623.7" y="131.0" width="45.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="626.7" y="142.0">one/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (144 samples, 3.85%)</title><rect x="623.7" y="115.0" width="45.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="626.7" y="126.0">one/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (144 samples, 3.85%)</title><rect x="623.7" y="99.0" width="45.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="626.7" y="110.0">one/..</text>
</g>
<g>
<title>char[] (113 samples, 3.02%)</title><rect x="623.7" y="83.0" width="35.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="626.7" y="94.0">cha..</text>
</g>
<g>
<title>java.lang.String (16 samples, 0.43%)</title><rect x="659.3" y="83.0" width="5.0" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="662.3" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (15 samples, 0.40%)</title><rect x="664.3" y="83.0" width="4.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="667.3" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (15 samples, 0.40%)</title><rect x="664.3" y="67.0" width="4.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="667.3" y="78.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (15 samples, 0.40%)</title><rect x="664.3" y="51.0" width="4.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="667.3" y="62.0"></text>
</g>
<g>
<title>byte[] (15 samples, 0.40%)</title><rect x="664.3" y="35.0" width="4.8" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="667.3" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.05%)</title><rect x="669.1" y="131.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="672.1" y="142.0"></text>
</g>
<g>
<title>java.lang.String[] (2 samples, 0.05%)</title><rect x="669.1" y="115.0" width="0.6" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="672.1" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (6 samples, 0.16%)</title><rect x="669.7" y="131.0" width="1.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="672.7" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.16%)</title><rect x="669.7" y="115.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="672.7" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 0.16%)</title><rect x="669.7" y="99.0" width="1.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="672.7" y="110.0"></text>
</g>
<g>
<title>java.lang.String (2 samples, 0.05%)</title><rect x="669.7" y="83.0" width="0.6" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="672.7" y="94.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4 samples, 0.11%)</title><rect x="670.3" y="83.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="673.3" y="94.0"></text>
</g>
<g>
<title>byte[] (4 samples, 0.11%)</title><rect x="670.3" y="67.0" width="1.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="673.3" y="78.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (10 samples, 0.27%)</title><rect x="671.6" y="147.0" width="3.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="674.6" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (10 samples, 0.27%)</title><rect x="671.6" y="131.0" width="3.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="674.6" y="142.0"></text>
</g>
<g>
<title>byte[] (10 samples, 0.27%)</title><rect x="671.6" y="115.0" width="3.1" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="674.6" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (5 samples, 0.13%)</title><rect x="674.7" y="147.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="677.7" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (5 samples, 0.13%)</title><rect x="674.7" y="131.0" width="1.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="677.7" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (5 samples, 0.13%)</title><rect x="674.7" y="115.0" width="1.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="677.7" y="126.0"></text>
</g>
<g>
<title>java.lang.String (2 samples, 0.05%)</title><rect x="674.7" y="99.0" width="0.7" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="677.7" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3 samples, 0.08%)</title><rect x="675.4" y="99.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="678.4" y="110.0"></text>
</g>
<g>
<title>byte[] (3 samples, 0.08%)</title><rect x="675.4" y="83.0" width="0.9" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="678.4" y="94.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (1 samples, 0.03%)</title><rect x="676.3" y="147.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="679.3" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (1 samples, 0.03%)</title><rect x="676.3" y="131.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="679.3" y="142.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (1 samples, 0.03%)</title><rect x="676.3" y="115.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="679.3" y="126.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (1 samples, 0.03%)</title><rect x="676.3" y="99.0" width="0.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="679.3" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ivanovandrey/SimpleTopology.getSpecialRequest (21 samples, 0.56%)</title><rect x="676.6" y="179.0" width="6.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="679.6" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (9 samples, 0.24%)</title><rect x="676.6" y="163.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="679.6" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1630521067.invoke (9 samples, 0.24%)</title><rect x="676.6" y="147.0" width="2.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="679.6" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (9 samples, 0.24%)</title><rect x="676.6" y="131.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="679.6" y="142.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (2 samples, 0.05%)</title><rect x="676.6" y="115.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="679.6" y="126.0"></text>
</g>
<g>
<title>java.lang.String (2 samples, 0.05%)</title><rect x="676.6" y="99.0" width="0.7" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="679.6" y="110.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (7 samples, 0.19%)</title><rect x="677.3" y="115.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="680.3" y="126.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (7 samples, 0.19%)</title><rect x="677.3" y="99.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="680.3" y="110.0"></text>
</g>
<g>
<title>byte[] (7 samples, 0.19%)</title><rect x="677.3" y="83.0" width="2.2" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="680.3" y="94.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (12 samples, 0.32%)</title><rect x="679.5" y="163.0" width="3.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="682.5" y="174.0"></text>
</g>
<g>
<title>java.lang.String[] (12 samples, 0.32%)</title><rect x="679.5" y="147.0" width="3.7" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="682.5" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (52 samples, 1.39%)</title><rect x="683.2" y="243.0" width="16.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="686.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (52 samples, 1.39%)</title><rect x="683.2" y="227.0" width="16.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="686.2" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (52 samples, 1.39%)</title><rect x="683.2" y="211.0" width="16.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="686.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (52 samples, 1.39%)</title><rect x="683.2" y="195.0" width="16.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="686.2" y="206.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (52 samples, 1.39%)</title><rect x="683.2" y="179.0" width="16.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="686.2" y="190.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,555 samples, 41.56%)</title><rect x="699.6" y="291.0" width="490.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="702.6" y="302.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (90 samples, 2.41%)</title><rect x="699.6" y="275.0" width="28.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="702.6" y="286.0">on..</text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (90 samples, 2.41%)</title><rect x="699.6" y="259.0" width="28.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="702.6" y="270.0">on..</text>
</g>
<g>
<title>one/nio/net/Session.process (1,465 samples, 39.15%)</title><rect x="728.0" y="275.0" width="462.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="731.0" y="286.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,465 samples, 39.15%)</title><rect x="728.0" y="259.0" width="462.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="731.0" y="270.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (1,465 samples, 39.15%)</title><rect x="728.0" y="243.0" width="462.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="731.0" y="254.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (736 samples, 19.67%)</title><rect x="728.0" y="227.0" width="232.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="731.0" y="238.0">one/nio/http/HttpSession.handle..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (736 samples, 19.67%)</title><rect x="728.0" y="211.0" width="232.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="731.0" y="222.0">one/nio/http/HttpServer.handleR..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (657 samples, 17.56%)</title><rect x="728.0" y="195.0" width="207.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="731.0" y="206.0">RequestHandler1_entity.hand..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (32 samples, 0.86%)</title><rect x="728.0" y="179.0" width="10.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="731.0" y="190.0"></text>
</g>
<g>
<title>java/lang/String.substring (32 samples, 0.86%)</title><rect x="728.0" y="163.0" width="10.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="731.0" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (32 samples, 0.86%)</title><rect x="728.0" y="147.0" width="10.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="731.0" y="158.0"></text>
</g>
<g>
<title>java.lang.String (21 samples, 0.56%)</title><rect x="728.0" y="131.0" width="6.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="731.0" y="142.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (11 samples, 0.29%)</title><rect x="734.6" y="131.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="737.6" y="142.0"></text>
</g>
<g>
<title>byte[] (11 samples, 0.29%)</title><rect x="734.6" y="115.0" width="3.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="737.6" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (69 samples, 1.84%)</title><rect x="738.1" y="179.0" width="21.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="741.1" y="190.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (69 samples, 1.84%)</title><rect x="738.1" y="163.0" width="21.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="741.1" y="174.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (69 samples, 1.84%)</title><rect x="738.1" y="147.0" width="21.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="741.1" y="158.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (69 samples, 1.84%)</title><rect x="738.1" y="131.0" width="21.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="741.1" y="142.0">j..</text>
</g>
<g>
<title>java.lang.String (38 samples, 1.02%)</title><rect x="738.1" y="115.0" width="12.0" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="741.1" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (31 samples, 0.83%)</title><rect x="750.1" y="115.0" width="9.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="753.1" y="126.0"></text>
</g>
<g>
<title>byte[] (31 samples, 0.83%)</title><rect x="750.1" y="99.0" width="9.8" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="753.1" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ivanovandrey/AsyncServiceImpl.entity (556 samples, 14.86%)</title><rect x="759.9" y="179.0" width="175.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="762.9" y="190.0">ru/mail/polis/service/i..</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.get (21 samples, 0.56%)</title><rect x="759.9" y="163.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="762.9" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.awaitDone (21 samples, 0.56%)</title><rect x="759.9" y="147.0" width="6.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="762.9" y="158.0"></text>
</g>
<g>
<title>java.util.concurrent.FutureTask$WaitNode (21 samples, 0.56%)</title><rect x="759.9" y="131.0" width="6.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="762.9" y="142.0"></text>
</g>
<g>
<title>ru.mail.polis.service.ivanovandrey.Replica (5 samples, 0.13%)</title><rect x="766.5" y="163.0" width="1.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="769.5" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ivanovandrey/AsyncServiceImpl.processRequest (115 samples, 3.07%)</title><rect x="768.1" y="163.0" width="36.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="771.1" y="174.0">ru/..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (20 samples, 0.53%)</title><rect x="768.1" y="147.0" width="6.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="771.1" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (20 samples, 0.53%)</title><rect x="768.1" y="131.0" width="6.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="771.1" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ivanovandrey/AsyncServiceImpl$$Lambda$65/94013272.get$Lambda (20 samples, 0.53%)</title><rect x="768.1" y="115.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="771.1" y="126.0"></text>
</g>
<g>
<title>ru.mail.polis.service.ivanovandrey.AsyncServiceImpl$$Lambda$65 (20 samples, 0.53%)</title><rect x="768.1" y="99.0" width="6.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="771.1" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.submit (42 samples, 1.12%)</title><rect x="774.4" y="147.0" width="13.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="777.4" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.newTaskFor (42 samples, 1.12%)</title><rect x="774.4" y="131.0" width="13.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="777.4" y="142.0"></text>
</g>
<g>
<title>java.util.concurrent.FutureTask (42 samples, 1.12%)</title><rect x="774.4" y="115.0" width="13.2" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="777.4" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Converter.strToByteBuffer (53 samples, 1.42%)</title><rect x="787.6" y="147.0" width="16.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="790.6" y="158.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (9 samples, 0.24%)</title><rect x="787.6" y="131.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="790.6" y="142.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (9 samples, 0.24%)</title><rect x="787.6" y="115.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="790.6" y="126.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (9 samples, 0.24%)</title><rect x="787.6" y="99.0" width="2.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="790.6" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (9 samples, 0.24%)</title><rect x="787.6" y="83.0" width="2.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="790.6" y="94.0"></text>
</g>
<g>
<title>byte[] (9 samples, 0.24%)</title><rect x="787.6" y="67.0" width="2.9" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="790.6" y="78.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (44 samples, 1.18%)</title><rect x="790.5" y="131.0" width="13.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="793.5" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (44 samples, 1.18%)</title><rect x="790.5" y="115.0" width="13.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="793.5" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (44 samples, 1.18%)</title><rect x="790.5" y="99.0" width="13.8" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="793.5" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ivanovandrey/AsyncServiceImpl.sendToReplicas (292 samples, 7.80%)</title><rect x="804.3" y="163.0" width="92.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="807.3" y="174.0">ru/mail/pol..</text>
</g>
<g>
<title>java.util.ArrayList (11 samples, 0.29%)</title><rect x="804.3" y="147.0" width="3.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="807.3" y="158.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (11 samples, 0.29%)</title><rect x="807.8" y="147.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="810.8" y="158.0"></text>
</g>
<g>
<title>java.lang.Object[] (11 samples, 0.29%)</title><rect x="807.8" y="131.0" width="3.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="810.8" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.get (32 samples, 0.86%)</title><rect x="811.3" y="147.0" width="10.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="814.3" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.awaitDone (32 samples, 0.86%)</title><rect x="811.3" y="131.0" width="10.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="814.3" y="142.0"></text>
</g>
<g>
<title>java.util.concurrent.FutureTask$WaitNode (32 samples, 0.86%)</title><rect x="811.3" y="115.0" width="10.1" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="814.3" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ivanovandrey/AsyncServiceImpl.forwardRequestFuture (48 samples, 1.28%)</title><rect x="821.4" y="147.0" width="15.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="824.4" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (23 samples, 0.61%)</title><rect x="821.4" y="131.0" width="7.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="824.4" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (23 samples, 0.61%)</title><rect x="821.4" y="115.0" width="7.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="824.4" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ivanovandrey/AsyncServiceImpl$$Lambda$66/30703227.get$Lambda (23 samples, 0.61%)</title><rect x="821.4" y="99.0" width="7.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="824.4" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.service.ivanovandrey.AsyncServiceImpl$$Lambda$66 (23 samples, 0.61%)</title><rect x="821.4" y="83.0" width="7.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="824.4" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.submit (25 samples, 0.67%)</title><rect x="828.6" y="131.0" width="7.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="831.6" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.newTaskFor (25 samples, 0.67%)</title><rect x="828.6" y="115.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="831.6" y="126.0"></text>
</g>
<g>
<title>java.util.concurrent.FutureTask (25 samples, 0.67%)</title><rect x="828.6" y="99.0" width="7.9" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="831.6" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ivanovandrey/AsyncServiceImpl.processRequest (65 samples, 1.74%)</title><rect x="836.5" y="147.0" width="20.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="839.5" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (11 samples, 0.29%)</title><rect x="836.5" y="131.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="839.5" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (11 samples, 0.29%)</title><rect x="836.5" y="115.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="839.5" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ivanovandrey/AsyncServiceImpl$$Lambda$65/94013272.get$Lambda (11 samples, 0.29%)</title><rect x="836.5" y="99.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="839.5" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.service.ivanovandrey.AsyncServiceImpl$$Lambda$65 (11 samples, 0.29%)</title><rect x="836.5" y="83.0" width="3.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="839.5" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.submit (11 samples, 0.29%)</title><rect x="840.0" y="131.0" width="3.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="843.0" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.newTaskFor (11 samples, 0.29%)</title><rect x="840.0" y="115.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="843.0" y="126.0"></text>
</g>
<g>
<title>java.util.concurrent.FutureTask (11 samples, 0.29%)</title><rect x="840.0" y="99.0" width="3.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="843.0" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Converter.strToByteBuffer (43 samples, 1.15%)</title><rect x="843.4" y="131.0" width="13.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="846.4" y="142.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (8 samples, 0.21%)</title><rect x="843.4" y="115.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="846.4" y="126.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (8 samples, 0.21%)</title><rect x="843.4" y="99.0" width="2.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="846.4" y="110.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (8 samples, 0.21%)</title><rect x="843.4" y="83.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="846.4" y="94.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (8 samples, 0.21%)</title><rect x="843.4" y="67.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="846.4" y="78.0"></text>
</g>
<g>
<title>byte[] (8 samples, 0.21%)</title><rect x="843.4" y="51.0" width="2.6" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="846.4" y="62.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (35 samples, 0.94%)</title><rect x="846.0" y="115.0" width="11.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="849.0" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (35 samples, 0.94%)</title><rect x="846.0" y="99.0" width="11.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="849.0" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (35 samples, 0.94%)</title><rect x="846.0" y="83.0" width="11.0" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="849.0" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ivanovandrey/AsyncServiceImpl.trySendResponse (52 samples, 1.39%)</title><rect x="857.0" y="147.0" width="16.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="860.0" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (52 samples, 1.39%)</title><rect x="857.0" y="131.0" width="16.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="860.0" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (52 samples, 1.39%)</title><rect x="857.0" y="115.0" width="16.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="860.0" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (37 samples, 0.99%)</title><rect x="857.0" y="99.0" width="11.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="860.0" y="110.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (37 samples, 0.99%)</title><rect x="857.0" y="83.0" width="11.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="860.0" y="94.0"></text>
</g>
<g>
<title>byte[] (37 samples, 0.99%)</title><rect x="857.0" y="67.0" width="11.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="860.0" y="78.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (15 samples, 0.40%)</title><rect x="868.7" y="99.0" width="4.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="871.7" y="110.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (15 samples, 0.40%)</title><rect x="868.7" y="83.0" width="4.7" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="871.7" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ivanovandrey/ResponseComposer.addResponse (42 samples, 1.12%)</title><rect x="873.4" y="147.0" width="13.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="876.4" y="158.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (42 samples, 1.12%)</title><rect x="873.4" y="131.0" width="13.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="876.4" y="142.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (42 samples, 1.12%)</title><rect x="873.4" y="115.0" width="13.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="876.4" y="126.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (42 samples, 1.12%)</title><rect x="873.4" y="99.0" width="13.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="876.4" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (42 samples, 1.12%)</title><rect x="873.4" y="83.0" width="13.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="876.4" y="94.0"></text>
</g>
<g>
<title>byte[] (42 samples, 1.12%)</title><rect x="873.4" y="67.0" width="13.2" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="876.4" y="78.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ivanovandrey/SimpleTopology.responsibleNodes (31 samples, 0.83%)</title><rect x="886.6" y="147.0" width="9.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="889.6" y="158.0"></text>
</g>
<g>
<title>java.util.ArrayList (10 samples, 0.27%)</title><rect x="886.6" y="131.0" width="3.2" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="889.6" y="142.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (21 samples, 0.56%)</title><rect x="889.8" y="131.0" width="6.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="892.8" y="142.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (21 samples, 0.56%)</title><rect x="889.8" y="115.0" width="6.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="892.8" y="126.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (21 samples, 0.56%)</title><rect x="889.8" y="99.0" width="6.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="892.8" y="110.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (21 samples, 0.56%)</title><rect x="889.8" y="83.0" width="6.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="892.8" y="94.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (21 samples, 0.56%)</title><rect x="889.8" y="67.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="892.8" y="78.0"></text>
</g>
<g>
<title>java.lang.Object[] (21 samples, 0.56%)</title><rect x="889.8" y="51.0" width="6.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="892.8" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ivanovandrey/AsyncServiceImpl.trySendResponse (114 samples, 3.05%)</title><rect x="896.4" y="163.0" width="36.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="899.4" y="174.0">ru/..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (114 samples, 3.05%)</title><rect x="896.4" y="147.0" width="36.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="899.4" y="158.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (114 samples, 3.05%)</title><rect x="896.4" y="131.0" width="36.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="899.4" y="142.0">one..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (90 samples, 2.41%)</title><rect x="896.4" y="115.0" width="28.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="899.4" y="126.0">on..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (90 samples, 2.41%)</title><rect x="896.4" y="99.0" width="28.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="899.4" y="110.0">on..</text>
</g>
<g>
<title>byte[] (90 samples, 2.41%)</title><rect x="896.4" y="83.0" width="28.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="899.4" y="94.0">by..</text>
</g>
<g>
<title>one/nio/net/Session.write (24 samples, 0.64%)</title><rect x="924.8" y="115.0" width="7.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="927.8" y="126.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (24 samples, 0.64%)</title><rect x="924.8" y="99.0" width="7.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="927.8" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/service/ivanovandrey/SimpleTopology.getNodes (9 samples, 0.24%)</title><rect x="932.4" y="163.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="935.4" y="174.0"></text>
</g>
<g>
<title>java.lang.String[] (9 samples, 0.24%)</title><rect x="932.4" y="147.0" width="2.8" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="935.4" y="158.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (79 samples, 2.11%)</title><rect x="935.2" y="195.0" width="24.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="938.2" y="206.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (79 samples, 2.11%)</title><rect x="935.2" y="179.0" width="24.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="938.2" y="190.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (79 samples, 2.11%)</title><rect x="935.2" y="163.0" width="24.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="938.2" y="174.0">j..</text>
</g>
<g>
<title>java.lang.String (31 samples, 0.83%)</title><rect x="935.2" y="147.0" width="9.8" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="938.2" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (48 samples, 1.28%)</title><rect x="945.0" y="147.0" width="15.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="948.0" y="158.0"></text>
</g>
<g>
<title>byte[] (48 samples, 1.28%)</title><rect x="945.0" y="131.0" width="15.1" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="948.0" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (347 samples, 9.27%)</title><rect x="960.1" y="227.0" width="109.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="963.1" y="238.0">one/nio/http/..</text>
</g>
<g>
<title>one.nio.http.Request (63 samples, 1.68%)</title><rect x="960.1" y="211.0" width="19.9" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="963.1" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (98 samples, 2.62%)</title><rect x="980.0" y="211.0" width="30.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="983.0" y="222.0">on..</text>
</g>
<g>
<title>java.lang.String[] (98 samples, 2.62%)</title><rect x="980.0" y="195.0" width="30.9" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="983.0" y="206.0">ja..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (186 samples, 4.97%)</title><rect x="1010.9" y="211.0" width="58.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1013.9" y="222.0">one/ni..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (186 samples, 4.97%)</title><rect x="1010.9" y="195.0" width="58.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1013.9" y="206.0">one/ni..</text>
</g>
<g>
<title>char[] (90 samples, 2.41%)</title><rect x="1010.9" y="179.0" width="28.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1013.9" y="190.0">ch..</text>
</g>
<g>
<title>java.lang.String (39 samples, 1.04%)</title><rect x="1039.3" y="179.0" width="12.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1042.3" y="190.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (57 samples, 1.52%)</title><rect x="1051.6" y="179.0" width="17.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1054.6" y="190.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (57 samples, 1.52%)</title><rect x="1051.6" y="163.0" width="17.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1054.6" y="174.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (57 samples, 1.52%)</title><rect x="1051.6" y="147.0" width="17.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1054.6" y="158.0"></text>
</g>
<g>
<title>byte[] (57 samples, 1.52%)</title><rect x="1051.6" y="131.0" width="17.9" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="1054.6" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (27 samples, 0.72%)</title><rect x="1069.5" y="227.0" width="8.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1072.5" y="238.0"></text>
</g>
<g>
<title>byte[] (27 samples, 0.72%)</title><rect x="1069.5" y="211.0" width="8.6" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="1072.5" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (48 samples, 1.28%)</title><rect x="1078.1" y="227.0" width="15.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1081.1" y="238.0"></text>
</g>
<g>
<title>java/lang/String.substring (48 samples, 1.28%)</title><rect x="1078.1" y="211.0" width="15.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1081.1" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (48 samples, 1.28%)</title><rect x="1078.1" y="195.0" width="15.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1081.1" y="206.0"></text>
</g>
<g>
<title>java.lang.String (28 samples, 0.75%)</title><rect x="1078.1" y="179.0" width="8.8" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1081.1" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (20 samples, 0.53%)</title><rect x="1086.9" y="179.0" width="6.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1089.9" y="190.0"></text>
</g>
<g>
<title>byte[] (20 samples, 0.53%)</title><rect x="1086.9" y="163.0" width="6.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1089.9" y="174.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (307 samples, 8.20%)</title><rect x="1093.2" y="227.0" width="96.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1096.2" y="238.0">one/nio/uti..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (307 samples, 8.20%)</title><rect x="1093.2" y="211.0" width="96.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1096.2" y="222.0">one/nio/uti..</text>
</g>
<g>
<title>char[] (133 samples, 3.55%)</title><rect x="1093.2" y="195.0" width="41.9" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1096.2" y="206.0">cha..</text>
</g>
<g>
<title>java.lang.String (48 samples, 1.28%)</title><rect x="1135.1" y="195.0" width="15.2" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1138.1" y="206.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (126 samples, 3.37%)</title><rect x="1150.3" y="195.0" width="39.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1153.3" y="206.0">jav..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (126 samples, 3.37%)</title><rect x="1150.3" y="179.0" width="39.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1153.3" y="190.0">jav..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (126 samples, 3.37%)</title><rect x="1150.3" y="163.0" width="39.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1153.3" y="174.0">jav..</text>
</g>
<g>
<title>byte[] (126 samples, 3.37%)</title><rect x="1150.3" y="147.0" width="39.7" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="1153.3" y="158.0">byt..</text>
</g>
</g>
</svg>
